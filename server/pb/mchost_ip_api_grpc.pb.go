// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/mchost_ip_api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IpService_GetIp_FullMethodName       = "/mchost_ip.service.v1.IpService/GetIp"
	IpService_CreateIp_FullMethodName    = "/mchost_ip.service.v1.IpService/CreateIp"
	IpService_DeleteIp_FullMethodName    = "/mchost_ip.service.v1.IpService/DeleteIp"
	IpService_ReserveIp_FullMethodName   = "/mchost_ip.service.v1.IpService/ReserveIp"
	IpService_UnreserveIp_FullMethodName = "/mchost_ip.service.v1.IpService/UnreserveIp"
	IpService_UseIp_FullMethodName       = "/mchost_ip.service.v1.IpService/UseIp"
	IpService_UnuseIp_FullMethodName     = "/mchost_ip.service.v1.IpService/UnuseIp"
)

// IpServiceClient is the client API for IpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpServiceClient interface {
	GetIp(ctx context.Context, in *GetIpRequest, opts ...grpc.CallOption) (*GetIpResponse, error)
	CreateIp(ctx context.Context, in *CreateIpRequest, opts ...grpc.CallOption) (*CreateIpResponse, error)
	DeleteIp(ctx context.Context, in *DeleteIpRequest, opts ...grpc.CallOption) (*DeleteIpResponse, error)
	ReserveIp(ctx context.Context, in *ReserveIpRequest, opts ...grpc.CallOption) (*ReserveIpResponse, error)
	UnreserveIp(ctx context.Context, in *UnreserveIpRequest, opts ...grpc.CallOption) (*UnreserveIpResponse, error)
	UseIp(ctx context.Context, in *UseIpRequest, opts ...grpc.CallOption) (*UseIpResponse, error)
	UnuseIp(ctx context.Context, in *UnuseIpRequest, opts ...grpc.CallOption) (*UnuseIpResponse, error)
}

type ipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIpServiceClient(cc grpc.ClientConnInterface) IpServiceClient {
	return &ipServiceClient{cc}
}

func (c *ipServiceClient) GetIp(ctx context.Context, in *GetIpRequest, opts ...grpc.CallOption) (*GetIpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIpResponse)
	err := c.cc.Invoke(ctx, IpService_GetIp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipServiceClient) CreateIp(ctx context.Context, in *CreateIpRequest, opts ...grpc.CallOption) (*CreateIpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIpResponse)
	err := c.cc.Invoke(ctx, IpService_CreateIp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipServiceClient) DeleteIp(ctx context.Context, in *DeleteIpRequest, opts ...grpc.CallOption) (*DeleteIpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteIpResponse)
	err := c.cc.Invoke(ctx, IpService_DeleteIp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipServiceClient) ReserveIp(ctx context.Context, in *ReserveIpRequest, opts ...grpc.CallOption) (*ReserveIpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveIpResponse)
	err := c.cc.Invoke(ctx, IpService_ReserveIp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipServiceClient) UnreserveIp(ctx context.Context, in *UnreserveIpRequest, opts ...grpc.CallOption) (*UnreserveIpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnreserveIpResponse)
	err := c.cc.Invoke(ctx, IpService_UnreserveIp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipServiceClient) UseIp(ctx context.Context, in *UseIpRequest, opts ...grpc.CallOption) (*UseIpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UseIpResponse)
	err := c.cc.Invoke(ctx, IpService_UseIp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipServiceClient) UnuseIp(ctx context.Context, in *UnuseIpRequest, opts ...grpc.CallOption) (*UnuseIpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnuseIpResponse)
	err := c.cc.Invoke(ctx, IpService_UnuseIp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpServiceServer is the server API for IpService service.
// All implementations must embed UnimplementedIpServiceServer
// for forward compatibility.
type IpServiceServer interface {
	GetIp(context.Context, *GetIpRequest) (*GetIpResponse, error)
	CreateIp(context.Context, *CreateIpRequest) (*CreateIpResponse, error)
	DeleteIp(context.Context, *DeleteIpRequest) (*DeleteIpResponse, error)
	ReserveIp(context.Context, *ReserveIpRequest) (*ReserveIpResponse, error)
	UnreserveIp(context.Context, *UnreserveIpRequest) (*UnreserveIpResponse, error)
	UseIp(context.Context, *UseIpRequest) (*UseIpResponse, error)
	UnuseIp(context.Context, *UnuseIpRequest) (*UnuseIpResponse, error)
	mustEmbedUnimplementedIpServiceServer()
}

// UnimplementedIpServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIpServiceServer struct{}

func (UnimplementedIpServiceServer) GetIp(context.Context, *GetIpRequest) (*GetIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIp not implemented")
}
func (UnimplementedIpServiceServer) CreateIp(context.Context, *CreateIpRequest) (*CreateIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIp not implemented")
}
func (UnimplementedIpServiceServer) DeleteIp(context.Context, *DeleteIpRequest) (*DeleteIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIp not implemented")
}
func (UnimplementedIpServiceServer) ReserveIp(context.Context, *ReserveIpRequest) (*ReserveIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveIp not implemented")
}
func (UnimplementedIpServiceServer) UnreserveIp(context.Context, *UnreserveIpRequest) (*UnreserveIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnreserveIp not implemented")
}
func (UnimplementedIpServiceServer) UseIp(context.Context, *UseIpRequest) (*UseIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseIp not implemented")
}
func (UnimplementedIpServiceServer) UnuseIp(context.Context, *UnuseIpRequest) (*UnuseIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnuseIp not implemented")
}
func (UnimplementedIpServiceServer) mustEmbedUnimplementedIpServiceServer() {}
func (UnimplementedIpServiceServer) testEmbeddedByValue()                   {}

// UnsafeIpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpServiceServer will
// result in compilation errors.
type UnsafeIpServiceServer interface {
	mustEmbedUnimplementedIpServiceServer()
}

func RegisterIpServiceServer(s grpc.ServiceRegistrar, srv IpServiceServer) {
	// If the following call pancis, it indicates UnimplementedIpServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IpService_ServiceDesc, srv)
}

func _IpService_GetIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).GetIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpService_GetIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).GetIp(ctx, req.(*GetIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpService_CreateIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).CreateIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpService_CreateIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).CreateIp(ctx, req.(*CreateIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpService_DeleteIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).DeleteIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpService_DeleteIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).DeleteIp(ctx, req.(*DeleteIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpService_ReserveIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).ReserveIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpService_ReserveIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).ReserveIp(ctx, req.(*ReserveIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpService_UnreserveIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnreserveIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).UnreserveIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpService_UnreserveIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).UnreserveIp(ctx, req.(*UnreserveIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpService_UseIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).UseIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpService_UseIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).UseIp(ctx, req.(*UseIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpService_UnuseIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnuseIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpServiceServer).UnuseIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpService_UnuseIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpServiceServer).UnuseIp(ctx, req.(*UnuseIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IpService_ServiceDesc is the grpc.ServiceDesc for IpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mchost_ip.service.v1.IpService",
	HandlerType: (*IpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIp",
			Handler:    _IpService_GetIp_Handler,
		},
		{
			MethodName: "CreateIp",
			Handler:    _IpService_CreateIp_Handler,
		},
		{
			MethodName: "DeleteIp",
			Handler:    _IpService_DeleteIp_Handler,
		},
		{
			MethodName: "ReserveIp",
			Handler:    _IpService_ReserveIp_Handler,
		},
		{
			MethodName: "UnreserveIp",
			Handler:    _IpService_UnreserveIp_Handler,
		},
		{
			MethodName: "UseIp",
			Handler:    _IpService_UseIp_Handler,
		},
		{
			MethodName: "UnuseIp",
			Handler:    _IpService_UnuseIp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mchost_ip_api.proto",
}
